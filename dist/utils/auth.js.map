{"version":3,"sources":["utils/auth.js"],"names":[],"mappings":";;;;;;;;;AAgCA;;;;;;;;gEAOO,iBAA0B,GAA1B,EAA+B,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,6BADH,GACW,SAAS,GAAT,CADX;;;AAGH,4BAAI,CAAC,KAAL,EAAY;AACR,gCAAI,KAAJ,CAAU,GAAV;AACH;;AAEG,+BAPD,GAOW,IAPX;;AAQH,4BAAI;AACA,sCAAU,0BAAO,KAAP,EAAc,iBAAO,KAArB,CAAV;AACH,yBAFD,CAEE,OAAO,GAAP,EAAY;AACV,gCAAI,KAAJ,CAAU,GAAV;AACH;;AAZE;AAAA,+BAcgB,eAAK,QAAL,CAAc,QAAQ,EAAtB,EAA0B,WAA1B,CAdhB;;AAAA;AAcG,4BAdH;;AAeH,4BAAI,CAAC,IAAL,EAAW;AACP,gCAAI,KAAJ,CAAU,GAAV;AACH;AAjBE;AAAA,+BAkBmB,cAAc,OAAd,CAAsB,KAAtB,CAlBnB;;AAAA;AAkBG,+BAlBH;;AAmBH,4BAAI,OAAJ,EAAa;AACT,gCAAI,KAAJ,CAAU,GAAV;AACH;AArBE,yDAsBI,MAtBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,U;;;;;QAxBN,Q,GAAA,Q;;AAXhB;;;;AACA;;;;AACA;;AACA;;IAAY,a;;;;;;AAEZ;;;;;;AATA;;;;AAeO,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AAC1B,QAAM,SAAS,IAAI,OAAJ,CAAY,MAAZ,CAAmB,aAAlC;AACA,QAAI,CAAC,MAAL,EAAa;AACT,eAAO,IAAP;AACH;AACD,QAAM,QAAQ,OAAO,KAAP,CAAa,GAAb,CAAd;AACA,QAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACpB,eAAO,IAAP;AACH;AACD,QAAM,SAAS,MAAM,CAAN,CAAf;AACA,QAAM,QAAQ,MAAM,CAAN,CAAd;AACA,QAAI,YAAY,IAAZ,CAAiB,MAAjB,CAAJ,EAA8B;AAC1B,eAAO,KAAP;AACH;AACD,WAAO,IAAP;AACH","file":"utils/auth.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport User from '../models/user';\nimport config from '../config';\nimport { verify } from 'jsonwebtoken';\nimport * as unvalid_token from '../utils/unvalid-token';\n\n/**\n * get token from request header\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @returns {*}\n */\nexport function getToken(ctx) {\n    const header = ctx.request.header.authorization;\n    if (!header) {\n        return null;\n    }\n    const parts = header.split(' ');\n    if (parts.length !== 2) {\n        return null;\n    }\n    const scheme = parts[0];\n    const token = parts[1];\n    if (/^Bearer$/i.test(scheme)) {\n        return token;\n    }\n    return null;\n}\n\n/**\n * ensure user login successfully\n *\n * @param ctx ctx.request.header.authorization = \"Bearer <token>\"\n * @param next\n * @returns {*}\n */\nexport async function ensureUser(ctx, next) {\n    const token = getToken(ctx);\n\n    if (!token) {\n        ctx.throw(401);\n    }\n\n    let decoded = null;\n    try {\n        decoded = verify(token, config.token);\n    } catch (err) {\n        ctx.throw(401);\n    }\n\n    const user = await User.findById(decoded.id, '-password');\n    if (!user) {\n        ctx.throw(401);\n    }\n    const existed = await unvalid_token.existed(token);\n    if (existed) {\n        ctx.throw(401);\n    }\n    return next();\n}\n"],"sourceRoot":"/source/"}