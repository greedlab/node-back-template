{"version":3,"sources":["models/user.js"],"names":[],"mappings":";;;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;AARA;;;;AASA,mBAAS,OAAT,GAAmB,OAAO,OAA1B;;AAEA,IAAM,OAAO,IAAI,mBAAS,MAAb,CAAoB;AAC7B,UAAM,EAAE,MAAM,MAAR,EAAgB,SAAS,MAAzB,EADuB;AAE7B,UAAM,EAAE,MAAM,MAAR,EAFuB;AAG7B,cAAU,EAAE,MAAM,MAAR,EAAgB,UAAU,IAA1B,EAAgC,QAAQ,IAAxC,EAHmB;AAI7B,cAAU,EAAE,MAAM,MAAR,EAAgB,UAAU,IAA1B;AAJmB,CAApB,CAAb;;AAOA,KAAK,GAAL,CAAS,MAAT,EAAiB,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AACpC,QAAM,OAAO,IAAb;;AAEA,QAAI,CAAC,KAAK,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAC9B,eAAO,MAAP;AACH;;AAED,QAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC7B,yBAAO,OAAP,CAAe,EAAf,EAAmB,UAAC,GAAD,EAAM,IAAN,EAAe;AAC9B,gBAAI,GAAJ,EAAS;AACL,uBAAO,GAAP;AACH,aAFD,MAEO;AACH,wBAAQ,IAAR;AACH;AACJ,SAND;AAOH,KARD,EASK,IATL,CASU,gBAAQ;AACV,yBAAO,IAAP,CAAY,KAAK,QAAjB,EAA2B,IAA3B,EAAiC,UAAC,GAAD,EAAM,IAAN,EAAe;AAC5C,gBAAI,GAAJ,EAAS;AACL,sBAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACH;AACD,iBAAK,QAAL,GAAgB,IAAhB;AACA,iBAAK,IAAL;AACH,SAND;AAOH,KAjBL,EAkBK,KAlBL,CAkBW;AAAA,eAAO,KAAK,GAAL,CAAP;AAAA,KAlBX;AAmBH,CA1BD;;AA4BA,KAAK,OAAL,CAAa,gBAAb,GAAgC,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AAChE,QAAM,OAAO,IAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,yBAAO,OAAP,CAAe,QAAf,EAAyB,KAAK,QAA9B,EAAwC,UAAC,GAAD,EAAM,OAAN,EAAkB;AACtD,gBAAI,GAAJ,EAAS;AACL,uBAAO,GAAP;AACH,aAFD,MAEO;AACH,wBAAQ,OAAR;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH,CAXD;;AAaA,KAAK,OAAL,CAAa,aAAb,GAA6B,SAAS,aAAT,GAAyB;AAClD,QAAM,OAAO,IAAb;AACA,WAAO,uBAAI,IAAJ,CAAS,EAAE,IAAI,KAAK,EAAX,EAAT,EAA0B,iBAAO,KAAjC,CAAP;AACH,CAHD;;kBAKe,mBAAS,KAAT,CAAe,MAAf,EAAuB,IAAvB,C","file":"models/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport config from '../config';\nimport jwt from 'jsonwebtoken';\n// import Promise from 'bluebird';\nmongoose.Promise = global.Promise;\n\nconst User = new mongoose.Schema({\n    type: { type: String, default: 'User' },\n    name: { type: String },\n    username: { type: String, required: true, unique: true },\n    password: { type: String, required: true }\n});\n\nUser.pre('save', function preSave(next) {\n    const user = this;\n\n    if (!user.isModified('password')) {\n        return next();\n    }\n\n    new Promise((resolve, reject) => {\n        bcrypt.genSalt(10, (err, salt) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(salt);\n            }\n        });\n    })\n        .then(salt => {\n            bcrypt.hash(user.password, salt, (err, hash) => {\n                if (err) {\n                    throw new Error(err);\n                }\n                user.password = hash;\n                next(null);\n            });\n        })\n        .catch(err => next(err));\n});\n\nUser.methods.validatePassword = function validatePassword(password) {\n    const user = this;\n    return new Promise((resolve, reject) => {\n        bcrypt.compare(password, user.password, (err, isMatch) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(isMatch);\n            }\n        });\n    });\n};\n\nUser.methods.generateToken = function generateToken() {\n    const user = this;\n    return jwt.sign({ id: user.id }, config.token);\n};\n\nexport default mongoose.model('user', User);\n"],"sourceRoot":"/source/"}