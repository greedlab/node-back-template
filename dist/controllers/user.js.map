{"version":3,"sources":["controllers/user.js"],"names":[],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/10.\n */\n\nimport passport from 'koa-passport';\nimport User from '../models/user';\n\n/**\n * list users\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST localhost:4002/user/list\n *\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function list(ctx, next) {\n    try {\n        const users = await User.find();\n        if (!users) {\n            ctx.throw(404);\n        }\n        ctx.body = {\n            users\n        };\n    } catch (err) {\n        if (err === 404 || err.name === 'CastError') {\n            ctx.throw(404);\n        }\n\n        ctx.throw(500);\n    }\n\n    if(next) {\n        return next();\n    };\n}\n\n/**\n * register\n *\n * @example curl -H \"Content-Type: application/json\" -X POST -d '{ \"username\": \"bell\", \"password\": \"secretpasas\" }' localhost:4002/user/register\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function register(ctx, next) {\n    console.log(ctx.request.body);\n    console.log(ctx.req.body);\n    const user = new User(ctx.request.body);\n    try {\n        await user.save();\n    } catch (err) {\n        ctx.throw(422, err.message);\n    }\n\n    const token = user.generateToken();\n    const response = user.toJSON();\n    delete response.password;\n    ctx.body = {\n        token,\n        user: response\n    };\n    if (next) {\n        return next();\n    }\n}\n\n/**\n * login\n *\n * @example curl -H \"Content-Type: application/json\" -X POST -d '{ \"username\": \"bell\", \"password\": \"secretpasas\" }' localhost:4002/user/login\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function login(ctx, next) {\n    let options = {\n        session: false\n    };\n    return passport.authenticate('local', options, (user) => {\n        if (!user) {\n            ctx.throw(401);\n        }\n        const token = user.generateToken();\n        const response = user.toJSON();\n        delete response.password;\n        ctx.body = {\n            token,\n            user: response\n        };\n    })(ctx, next);\n}\n\n/**\n * logout\n *\n * @example curl -H \"Authorization: Bearer <token>\" -X POST -d 'id=57ac5a7daded43ff231b648d'  localhost:4002/user/logout\n * @param ctx\n * @param next\n * @returns {*}\n */\nexport async function logout(ctx, next) {\n    try {\n        const user = await User.findById(ctx.request.body.id);\n        if (!user) {\n            ctx.throw(404);\n        }\n        user.token = null;\n        await user.save();\n    } catch (err) {\n        ctx.throw(422, err.message);\n    }\n    ctx.status = 200;\n    ctx.body = {\n        success: true\n    };\n}\n"],"sourceRoot":"/source/"}